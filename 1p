#!/usr/bin/env bash
# Usage: 1p [-1] [-H|-u|-p|-o|-c|-b|-U|-j] [ACCOUNT] [QUERY...]
# vim: set ft=sh tw=72 sw=2 ts=2 et :

# 1p - fuzzy-find 1Password items
# Copyright (C) 2018 Noel Cower
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# If your copy of 1p is outdated, you can find the current release of it
# at <https://github.com/nilium/1p>.

# Requires:
# - op: https://support.1password.com/command-line-getting-started/
# - jq: https://stedolan.github.io/jq/
# - fzf: https://github.com/junegunn/fzf
# - fex: https://github.com/jordansissel/fex
# - pbcopy or xclip: Clipboard tools.
# - gen-totp: Any program that takes an otpauth:// URI as its first
#   argument and prints a TOTP.

if [[ "$1" = -h ]] || [[ "$1" == --help ]]; then
  cat <<EOF 1>&2
Usage: 1p [-h|--help] [-1] [-b|-p|-c|-u|-o|-U|-j] [ACCOUNT] [QUERY...]

Searches a 1Password account (or all known accounts) for an item and
formats the item's username, password, and OTP (optional).

If -1 is passed, 1p will return as soon as it's found a match instead of
presenting an interactive fzf window. This must be the first argument.

In addition, you can pass a format specifier before the account name. By
default, the formatter is -H (clipboard).

FORMATS
-H      Print the username (and OTP, if possible) and copy the password
        to the clipboard using pbcopy.
-u      Username.
-p      Password.
-o      OTP (requires a gen-totp tool that accepts an otpauth:// URI).
-c      Username:password (colon-separated).
-b      Basic authentication. Used in HTTP authentication.
-U      1Password item UUID.
-j      Raw JSON.
EOF
  exit 2
fi

export op1p_session_dir="$HOME/.op/.sessions"
mkdir -p "$op1p_session_dir"
chmod 700 "$op1p_session_dir"

have_session() {
  [[ ":$(env | fex '=1 /^OP_SESSION_/_-1' | tr -s ' \n' ':'):" = *":${1}:"* ]]
}
export -f have_session

have_command() {
  command -v "$@" >/dev/null 2>&1
}
export -f have_command

to_clipboard() {
  if have_command pbcopy; then
    pbcopy
  elif have_command xclip; then
    xclip -i -selection p && xclip -o -selection p | xclip -i -selection c
  elif have_command xsel; then
    xsel -i -p && xsel -o -p | xsel -i -b
  else
    cat
  fi
}

immediate=0
if [[ "$1" = -1 ]]; then
  # Do not start fzf interactively
  immediate=1
  shift
fi

auth_type=
case "$1" in
-H) # Clipboard auth (mostly-human)
  auth_type=clipboard;;
-b) # Basic authentication
  auth_type=basic;;
-p) # Print password
  auth_type=password;;
-c) # Print name:password
  auth_type=userpass;;
-u) # Print username
  auth_type=user;;
-o) # Print TOTP
  auth_type=totp;;
-U) # Print UUID
  auth_type=uuid;;
-j) # Print item JSON
  auth_type=json;;
esac

if [[ -n "$auth_type" ]]; then
  shift
fi
: ${auth_type:=clipboard}

session_refresh() {
  local name="$1"
  local max_age="${2:-1500}"
  local f="$op1p_session_dir/$1"
  if [[ -r "$f" ]]; then
    . "$f"
    if have_session "$name" && [[ $(($(date +%s) - $(date -r "$f" +%s))) -le $max_age ]]; then
      return 0
    fi
    rm -f "$f"
  fi
  text="$(op signin "$name")"
  if [[ -z "$text" ]]; then
    return 1
  fi
  echo "$text" | install -m 600 /dev/stdin "$f"
  . "$f"
  return 0
}
export -f session_refresh

if [[ -n "$1" ]]; then
  session=("$1")
  shift
else
  session=($(jq -r '.accounts[].shorthand' "$HOME/.op/config"))
fi

query="$*"
set --
if [[ -n "$query" ]]; then
  if [[ $immediate = 0 ]]; then
    set -- -q "$query"
  else
    set -- -f "$query"
  fi
fi

# Refresh sessions
for sn in "${session[@]}"; do
  if ! session_refresh "$sn"; then
    echo "Session unavailable: $sn" 1>&2
  else
    . "$op1p_session_dir/$sn"
  fi
done

sel="$(
  for sn in "${session[@]}"; do
    op list items --account="$sn" |
      jq --arg sn "$sn" -r '.[] | "\($sn)\t\(.uuid)\t\(.overview.title)"'
  done |
  fzf --preview="op get item --account={1} {3} | jq 'del(.details)'" -d $'\t' "$@"
)"

sel="$(printf '%s' "$sel" | head -n1)"
if [[ -z "$sel" ]]; then
  exit 0
fi

sn="$(printf '%s' "$sel" | fex $' 1\t1')"
uuid="$(printf '%s' "$sel" | fex $' 1\t2')"
if [[ "$auth_type" = uuid ]]; then
  echo $uuid
  exit 0
fi

json="$(op get item --account="$sn" "$uuid")"
query() {
  printf '%s' "$json" | jq -r "$@"
}

withuserpass() {
  query '.details |
    ([
      ((.fields // [])[] | select(.type == "T" and .designation == "username").value)
     ] | first // "") as $user |
    ([
      ((.fields // [])[] | select(.type == "P" and .designation == "password").value),
      (.password // "")
    ] | map(select(. != "")) | first // "") as $pass |
    '"$*"
}

totp() {
  if [[ -z "$(command -v gen-totp)" ]]; then
    return 2
  fi
  totpuri="$(query '[.details.sections[] | (.fields // [])[]] | map(select(.v | startswith("otpauth://"))) | first.v | select((. != "") and (. != null))')"
  if [[ -z "$totpuri" ]]; then
    return 1
  fi
  echo "$(gen-totp "$totpuri")"
}

printf $'\r'
case $auth_type in
clipboard)
  # Username
  withuserpass '$user'
  # Password
  withuserpass '$pass' | to_clipboard
  # TOTP
  otp="$(totp)"
  if otp="$(totp)"; then
    echo "OTP: $otp"
  fi
  ;;

userpass)
  withuserpass '[$user, $pass] | map(select(. != "")) | join(":")'
  ;;

user)
  withuserpass '$user'
  ;;

totp)
  totp
  ;;

password)
  withuserpass '$pass'
  ;;

basic)
  withuserpass '[$user, $pass] | map(select(. != "")) | join(":") | @base64'
  ;;

json)
  query .
  ;;
esac